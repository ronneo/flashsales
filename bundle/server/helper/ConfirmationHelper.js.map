{"version":3,"sources":["../../../server/helper/ConfirmationHelper.js"],"names":["ConfirmationHelper","question","userProfile","questionFlow","userResponse","responses","fields","map","field","qid","findQidWithAnchor","anchor","findQuestionWithQid","response","userResponses","filter","reduce","latest","current","timeOfMessage","response_text","type","options","find","opt","resp_payload","payload","text","title","join","_userProfile","_userResponse","content_type"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,kB;;;;;;;gCACAC,Q,EAAUC,W,EAAaC,Y,EAAcC,Y,EAAc;AACpE,UAAIC,YAAYJ,SAASK,MAAT,CAAgBC,GAAhB,CAAoB,UAACC,KAAD,EAAW;AAC7C,YAAIC,MAAMN,aAAaO,iBAAb,CAA+BF,MAAMG,MAArC,CAAV;AACA,YAAIF,OAAO,CAAC,CAAZ,EAAe;AACb,iBAAO,IAAP,CADa,CACC;AACf;AACD,YAAIR,WAAWE,aAAaS,mBAAb,CAAiCH,GAAjC,CAAf;;AAEA,YAAII,WAAWT,aAAaU,aAAb,CACZC,MADY,CACL;AAAA,iBAAaF,SAASJ,GAAT,IAAgBA,GAA7B;AAAA,SADK,EAEZO,MAFY,CAEL,UAACC,MAAD,EAASC,OAAT,EAAqB;AAC3B,iBACGA,QAAQC,aAAR,GAAwBF,OAAOE,aAAhC,GACAD,OADA,GAEAD,MAHF;AAKD,SARY,CAAf;;AAUA,YAAIG,gBAAiBnB,SAASoB,IAAT,IAAiB,UAAlB,GAClBpB,SAASqB,OAAT,CAAiBC,IAAjB,CAAsB;AAAA,iBAAOC,IAAIC,YAAJ,IAAoBZ,SAASa,OAApC;AAAA,SAAtB,EAAmEC,IADjD,GAElBd,SAASa,OAFX;;AAIA,eAAUlB,MAAMoB,KAAhB,UAA0BR,aAA1B;AACD,OAtBe,EAsBbS,IAtBa,CAsBR,IAtBQ,CAAhB;;AAwBA,aAAU,8BAAgB5B,SAAS0B,IAAzB,EAA+BzB,WAA/B,CAAV,UACFG,SADE;AAED;;;kCAEoBJ,Q,EAAU6B,Y,EAAcC,a,EAAe;AAC1D,aAAO9B,SAASK,MAAT,CAAgBC,GAAhB,CAAoB,UAACC,KAAD,EAAW;AACpC,eAAO;AACLwB,wBAAc,MADT;AAELJ,iBAAOpB,MAAMoB,KAFR;AAGLF,mBAASlB,MAAMG;AAHV,SAAP;AAKD,OANM,CAAP;AAOD;;;;;;kBAtCkBX,kB","file":"ConfirmationHelper.js","sourcesContent":["import render_template from 'server/helper/TemplateHelper';\n\nexport default class ConfirmationHelper {\n  static render_text(question, userProfile, questionFlow, userResponse) {\n    let responses = question.fields.map((field) => {\n      let qid = questionFlow.findQidWithAnchor(field.anchor);\n      if (qid == -1) {\n        return null;  // TODO\n      }\n      let question = questionFlow.findQuestionWithQid(qid);\n\n      let response = userResponse.userResponses\n        .filter(response => (response.qid == qid))\n        .reduce((latest, current) => {\n          return (\n            (current.timeOfMessage > latest.timeOfMessage) ?\n            current:\n            latest\n          );\n        });\n\n      let response_text = (question.type == 'question') ?\n        question.options.find(opt => opt.resp_payload == response.payload).text :\n        response.payload;\n\n      return `${field.title}: ${response_text}`;\n    }).join('\\n');\n\n    return `${render_template(question.text, userProfile)}\n${responses}`;\n  }\n\n  static quick_replies(question, _userProfile, _userResponse) {\n    return question.fields.map((field) => {\n      return {\n        content_type: 'text',\n        title: field.title,\n        payload: field.anchor,\n      };\n    });\n  }\n}\n"]}