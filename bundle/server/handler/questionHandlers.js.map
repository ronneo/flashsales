{"version":3,"sources":["../../../server/handler/questionHandlers.js"],"names":["NEED_NO_ANSWER","NEED_ANSWER","URL_REGEXP","questionHandlerMap","psid","question","userProfile","message_payload","buttons","length","attachment","type","payload","template_type","text","map","button","url","title","webview_height_ratio","recipient","id","message","quick_replies","options","option","resp_payload","quick_reply","content_type","urlText","elements","element","obj","subtitle","image_url","next","match","is_reusable","questionFlow","userResponse","ConfirmationHelper","render_text","confirmation_prompt","questionExpectMap"],"mappings":"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","file":"questionHandlers.js","sourcesContent":["import render_template from 'server/helper/TemplateHelper';\nimport ConfirmationHelper from 'server/helper/ConfirmationHelper';\n\nconst NEED_NO_ANSWER = true;\nconst NEED_ANSWER = false;\n\nconst URL_REGEXP = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n\nexport let questionHandlerMap = {\n  'greeting': (psid, question, userProfile) => {\n    let message_payload;\n\n    if (question.buttons && question.buttons.length > 0) {\n      message_payload = {\n        attachment: {\n          type: 'template',\n          payload: {\n            template_type: 'button',\n            text: render_template(question.text, userProfile),\n            buttons: question.buttons.map((button) => {\n              return {\n                type: 'web_url',\n                url: button.url,\n                title: button.title,\n                webview_height_ratio: 'full',\n              };\n            }),\n          }\n        }\n      };\n    } else {\n      message_payload = {\n        text: render_template(question.text, userProfile),\n      };\n    }\n\n    return [\n      {\n        recipient: { id: psid },\n        message: message_payload,\n      },\n      NEED_NO_ANSWER,\n    ];\n  },\n\n  'question': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          text: render_template(question.text, userProfile),\n          quick_replies: question.options.map((option) => {\n            return {\n              'content_type': 'text',\n              'title': render_template(option.text, userProfile),\n              'payload': option.resp_payload,\n            };\n          }),\n        },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  'input': (psid, question, userProfile) => {\n    let quick_replies = question.quick_replies || [];\n    if (quick_replies.length === 0) {\n      return [\n        {\n          recipient: { id: psid },\n          message: { text: render_template(question.text, userProfile) },\n        },\n        NEED_ANSWER,\n      ];\n    }\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          text: render_template(question.text, userProfile),\n          quick_replies: quick_replies.map((quick_reply) => {\n            return ({\n              content_type: quick_reply.content_type,\n            });\n          })\n        },\n      },\n      NEED_ANSWER,\n    ];\n  },\n\n  't&c': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type: 'template',\n            payload: {\n              template_type: 'button',\n              text: render_template(question.text, userProfile),\n              buttons:[{\n                type: 'web_url',\n                url: question.url,\n                title: render_template(question.urlText, userProfile),\n                'webview_height_ratio': 'compact'\n              }]\n            }\n          }\n        },\n      },\n      NEED_NO_ANSWER\n    ];\n  },\n\n  'carousel': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type: 'template',\n            payload: {\n              template_type: 'generic',\n              elements: question.elements.map((element) => {\n                var obj = {\n                  title: render_template(element.title, userProfile),\n                  subtitle: render_template(element.subtitle, userProfile),\n                  image_url: element.image_url,\n                };\n\n                if (element.image_url) {\n                  obj.image_url = element.image_url;\n                }\n\n                if (element.buttons && element.buttons.length > 0) {\n                  obj.buttons = element.buttons.map((button) => {\n                    if (button.next || !(button.url.match(URL_REGEXP))) {\n                      return {\n                        type: 'postback',\n                        title: render_template(button.title, userProfile),\n                        payload: button.next,\n                      };\n                    } else {\n                      return {\n                        type: 'web_url',\n                        title: render_template(button.title, userProfile),\n                        url: button.url,\n                      };\n                    }\n                  });\n                }\n\n                return obj;\n              }),\n            }\n          }\n        },\n      },\n      (question.next?NEED_NO_ANSWER:NEED_ANSWER)\n    ];\n  },\n  'image': (psid, question, userProfile) => {\n    return [\n      {\n        recipient: { id: psid },\n        message: {\n          attachment: {\n            type:'image',\n            payload:{\n              url: question.url,\n              is_reusable: true\n            }\n          }\n        },\n      },\n      NEED_NO_ANSWER,\n    ];\n  },\n  'confirmation': (psid, question, userProfile, questionFlow, userResponse) => {\n    if (psid == 0) {\n      // TODO: Hack. AppEvent.jsx is calling this without actual request\n      // making render_text fail.\n      // should extract NEED_ANSWER & NEED_NO_ANSWER to a separate method\n      return [{}, NEED_ANSWER];\n    } else {\n      return [\n        {\n          recipient: { id: psid },\n          message: {\n            attachment: {\n              type: 'template',\n              payload: {\n                template_type: 'button',\n                text: ConfirmationHelper.render_text(question, userProfile, questionFlow, userResponse),\n                buttons: [\n                  {\n                    type: 'postback',\n                    title: (question.confirmation_prompt || 'Confirm'),\n                    payload: '__confirm__',\n                  }\n                ],\n              },\n            },\n            quick_replies: ConfirmationHelper.quick_replies(question, userProfile, userResponse),\n          }\n        },\n        NEED_ANSWER,\n      ];\n    }\n  },\n};\n\nexport let questionExpectMap = {\n  'question': 'quick_reply',\n  'input': 'text_input',\n  'carousel': 'postback',\n  'confirmation': 'confirmation',\n};\n"]}